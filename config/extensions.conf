; Copyright (C) 2007-2015, Manuel Meitinger
; This program is free software, distributed under the terms of
; the GNU General Public License Version 2. See the LICENSE file
; at the top of the source tree.

[general]
static=yes              ; Die Datei darf nicht von pbx_config geschrieben werden...
writeprotect=yes        ; ...und auch nicht über die CLI.
clearglobalvars=yes     ; Globale Variablen sollen reloads neu eingelesen werden.
userscontext=extensions ; Kontext in dem die hints von der users.conf eingetragen werden.



;===============================================================================
; Globale Variablen
;-------------------------------------------------------------------------------

[globals]
LANGUAGE=de
PROGRAM=program,default,1
TRANSFER_CONTEXT=from-transfer
ANSWER_DELAY=500
EMERGENCIES=1XX!
BRANCHES=[24567]
BRANCHES_LIST=2,4,5,6,8
BRANCHES_LEN=1
EXTENSIONS=XX
EXTENSIONS_LEN=2
EXTENSIONS_PADDING=0
EXTENSION_PROGRAM=0
EXTENSION_VOICEMAIL=1
PREFIX_INTERNATIONAL=00
PREFIX_NATIONAL=0
COUNTRY_CODE=43
COUNTRY_PATTERN=ZXXX
PRIVILEGE_SETPROGRAM=0
PRIVILEGE_REMOTEPICKUP=0
PRIVILEGE_REMOTECALL=0
PRIVILEGE_EXTERNALCALL=0
PRIVILEGE_DEVICECALL=0
PRIVILEGE_ECHO=0
PRIVILEGE_TRANSFERCALL=0
PRIVILEGE_SETMAILBOX=0



;===============================================================================
; Hilfskontexte
;-------------------------------------------------------------------------------

; Überprüft Bedingung
;---------------------
[helpers]
exten => assert,  1,Goto(100)
 same =>        100,GotoIf(${LOCAL(ARG1)}?ok)
 same =>          n,Playback(pbx-invalid)
 same =>          n,Hangup()
 same =>          n(ok),Return()
exten => nationalize,  1,Goto(100)
 same =>              50(cid),Set(LOCAL(ARG1)=${QUOTE(${CALLERID(num)})})
 same =>               n,Goto(100)
 same =>             100,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1)})})
 same =>               n,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1):0:1})}${FILTER(0123456789,${LOCAL(ARG1):1})})
 same =>               n,GotoIf($[${LEN(${LOCAL(ARG1)})}<=${EXTENSIONS_LEN}]?tooshort)
 same =>               n,Return(${IF($["${LOCAL(ARG1):0:3}"="+${COUNTRY_CODE}"]?${PREFIX_NATIONAL}${LOCAL(ARG1):3}:${IF($["${LOCAL(ARG1):0:1}"="+"]?${PREFIX_INTERNATIONAL}${LOCAL(ARG1):1}:${LOCAL(ARG1)})})})
 same =>               n(tooshort),Return(${LOCAL(ARG1)})
exten => internationalize,  1,Goto(100)
 same =>                  50(cid),Set(LOCAL(ARG1)=${QUOTE(${CALLERID(num)})})
 same =>                   n,Goto(100)
 same =>                 100,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1)})})
 same =>                   n,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1):0:1})}${FILTER(0123456789,${LOCAL(ARG1):1})})
 same =>                   n,GotoIf($[${LEN(${LOCAL(ARG1)})}<=${EXTENSIONS_LEN}]?tooshort)
 same =>                   n,Return(${IF($["${LOCAL(ARG1):0:${LEN(${PREFIX_INTERNATIONAL})}}"="${PREFIX_INTERNATIONAL}"]?+${LOCAL(ARG1):${LEN(${PREFIX_INTERNATIONAL})}}:${IF($["${LOCAL(ARG1):0:${LEN(${PREFIX_NATIONAL})}}"="${PREFIX_NATIONAL}"]?+${COUNTRY_CODE}${LOCAL(ARG1):${LEN(${PREFIX_NATIONAL})}}:${LOCAL(ARG1)})})})
 same =>                   n(tooshort),Return(${LOCAL(ARG1)})

; Ruft das Program auf
;----------------------
[program]
exten => default,  1,Goto(100)
 same =>         100,Set(LOCAL(VM_OPTIONS)=u)
 same =>           n,GotoIf(${DB_EXISTS(Branch/Program)}?:vm)
 same =>           n,GotoIf(${DIALPLAN_EXISTS(program,${DB_RESULT},1)}?:vm)
 same =>           n,Gosub(${DB_RESULT},1)
 same =>           n,Set(LOCAL(VM_OPTIONS)=${GOSUB_RETVAL})
 same =>           n(vm),GotoIf(${DB_EXISTS(Branch/Mailbox)}?:done)
 same =>           n,GotoIf(${MAILBOX_EXISTS(${DB_RESULT})}?:done)
 same =>           n,Set(CHANNEL(language)=${LANGUAGE})
 same =>           n,VoiceMail(${DB_RESULT},${LOCAL(VM_OPTIONS)}s)
 same =>           n(done),Return()

; Wählt eine Rufnummer
;----------------------
[dial]
exten => out,  1,Set(LOCAL(ARG2)=60)
 same =>       2,Set(LOCAL(ARG3)=dg${IF(${PRIVILEGE_TRANSFERCALL}?T)})
 same =>       3,Goto(100)
 same =>     100,Set(LOCAL(DIRECTION)=out)
 same =>       n,Goto(exec,1)
exten => in,  1,Set(LOCAL(ARG2)=30)
 same =>      2,Set(LOCAL(ARG3)=dgrt)
 same =>      3,Goto(100)
 same =>    100,Gosub(helpers,internationalize,cid)
 same =>      n,Set(CALLERID(num)=${GOSUB_RETVAL})
 same =>      n,Set(LOCAL(DIRECTION)=in)
 same =>      n,Goto(exec,1)
exten => exec,1,Set(LOCAL(EXITCONTEXT)=dial)
 same =>      n,Dial(${LOCAL(ARG1)},${LOCAL(ARG2)},${LOCAL(ARG3)})
 same =>      n,GotoIf($["${DIALSTATUS}"="ANSWER"]?answered)
 same =>      n,GotoIf($["${LOCAL(DIRECTION)}"="out"]?check)
 same =>      n,Goto(*,1)
 same =>      n(check),GotoIf($["${DIALSTATUS}"="BUSY"]?busy)
 same =>      n,Congestion(3)
 same =>      n,Goto(*,1)
 same =>      n(busy),Busy(3)
 same =>      n,Goto(*,1)
 same =>      n(answered),Hangup()
exten => *,1,Return(${DIALSTATUS})



;===============================================================================
; Erweiterbare Kontexte
;-------------------------------------------------------------------------------

; Kontext-Stub für eingehende Anrufe
;------------------------------------
[from-external]

; Kontext-Stub für ausgehende Anrufe
;------------------------------------
[from-internal]

; Stellvertretend annehmbare Nummern
;------------------------------------
[pickup]
exten => _${EXTENSIONS},1,PickupChan(SIP/${EXTEN},p)

; Lokale Anrufsziele
;--------------------
[extensions]
exten => ${EXTENSIONS_PADDING}${EXTENSION_PROGRAM},1,Gosub(${PROGRAM})
exten => i,1,Playback(pbx-invalid)
 same =>   n,Congestion()

; Subscribefähige Nummern
;-------------------------
[hints]
include => extensions
exten => _*12*Z,hint,Custom:Program${EXTEN:4}
exten => _${BRANCHES}${EXTENSIONS},hint,Custom:${EXTEN}

; Erweiterungen
;---------------
#include "extensions_local.conf"



;===============================================================================
; Eingehende Wahlkontexte
;-------------------------------------------------------------------------------

; Externe Anrufe
;----------------
[from-external](+)
exten => ${EXTENSIONS_PADDING}${EXTENSION_PROGRAM},1,NoOp(Externer Programmaufruf)
 same =>                                           n,Gusub(${PROGRAM})
 same =>                                           n,Hangup()
exten => ${EXTENSIONS_PADDING}${EXTENSION_VOICEMAIL},1,NoOp(Externer Voicemailabruf)
 same =>                                             n,Answer(${ANSWER_DELAY})
 same =>                                             n,VoiceMailMain()
 same =>                                             n,Hangup()
exten => _${EXTENSIONS},1,NoOp(Eingehender externer Anruf)
 same =>                n,GotoIf(${MAILBOX_EXISTS(${EXTEN})}?extensions,,1:i,1)
exten => i,1,NoOp(Ungültiger eingehender Anruf)
 same =>   n,Gosub(${PROGRAM})
 same =>   n,Hangup()

; Zweigstellenübergreifenden Anrufe
;-----------------------------------
[from-remote]
exten => _${EXTENSIONS}:.,1,NoOp(Eingehender Zweigstellenanruf)
 same =>                  n,Goto(${EXTEN:$[${EXTENSIONS_LEN}+1]},${EXTEN:0:${EXTENSIONS_LEN}},1)

; Zu transferierende Anrufe
;---------------------------
[from-transfer]
exten => _${EXTENSIONS},1,NoOp(Interner Transfer)
 same =>                n,Goto(extensions,,1)
exten => _${BRANCHES}${EXTENSIONS},1,NoOp(Zweigstellenübergreifender Transfer)
 same =>                           n,Dial(IAX2/${EXTEN:0:${BRANCHES_LEN}}/${EXTEN:${BRANCHES_LEN}}:extensions)
exten => _${EXTENSIONS_PADDING}${BRANCHES},1,Goto(${EXTEN:${LEN(${EXTENSIONS_PADDING})}}${EXTENSIONS_PADDING}${EXTENSION_PROGRAM},1)
exten => _${BRANCH}${EXTENSIONS},1,Goto(${EXTEN:${BRANCHES_LEN}},1)

; Direkter Anruf eines Users
;----------------------------
[macro-stdexten]
exten => s,1,NoOp(Useranruf)
 same =>   n,Gosub(dial,in,2(${ARG2},30))
 same =>   n,Set(CHANNEL(language)=${LANGUAGE})
 same =>   n,VoiceMail(${ARG1},${IF($["${GOSUB_RETVAL}"="BUSY"]?b:u)}s)
 same =>   n,MacroExit()
exten => a,1,NoOp(Voicemailabbruch)
 same =>   n,MacroExit()
exten => o,1,NoOp(Vermittlungsanforderung)
 same =>   n,Gosub(${PROGRAM})
 same =>   n,MacroExit()



;===============================================================================
; Ausgehende Wahlkontexte
;-------------------------------------------------------------------------------

; Wählt eine allgemeine Nummer und springt auf (i,return) danach
;----------------------------------------------------------------
[internal-dial]
exten => _+.,1,NoOp(Ausgehender Anruf)
 same =>     n,Set(DIAL=+${FILTER(0123456789,${EXTEN:1})})
 same =>     n,Set(DIAL_LEN=${LEN(${DIAL})})
 same =>     n,Set(LIST=${BRANCHES_LIST})
 same =>     n,While(${EXISTS(${SET(PEER=${SHIFT(LIST)})})})
 same =>     n,Gosub(helpers,internationalize,1(${QUOTE(${IAXPEER(${PEER},callerid_num)})}))
 same =>     n,Set(BASE=${GOSUB_RETVAL})
 same =>     n,Set(BASE_LEN=${LEN(${BASE})})
 same =>     n,GotoIf($["${BASE}"="${DIAL:0:${BASE_LEN}}"]?match)
 same =>     n,ContinueWhile()
 same =>     n(match),GotoIf($[${DIAL_LEN}=${BASE_LEN}]?${PEER}${EXTENSIONS_PADDING}0)
 same =>     n,GotoIf($[${DIAL_LEN}=(${BASE_LEN}+${EXTENSIONS_LEN})]?${PEER}${DIAL:${BASE_LEN}},1)
 same =>     n,Goto(i,1)
 same =>     n,EndWhile()
 same =>     n,Gosub(helpers,assert,1(${PRIVILEGE_EXTERNALCALL}))
 same =>     n,Gosub(helpers,internationalize,cid)
 same =>     n,Set(CALLER=${GOSUB_RETVAL})
 same =>     n,Gosub(helpers,internationalize,1(${QUOTE(${IAXPEER(${BRANCH},callerid_num)})}))
 same =>     n,Set(BASE=${GOSUB_RETVAL})
 same =>     n,Gosub(dial,string,${IF($["${CALLER:0:${LEN(${BASE})}}"="${BASE}"]?2(${DIAL},${CALLER:${LEN(${BASE})}}):1(${DIAL}))})
 same =>     n,Gosub(dial,out,1(${GOSUB_RETVAL}))
 same =>     n,Goto(i,return)
exten => _${EXTENSIONS},1,NoOp(Lokaler Anruf)
 same =>                n,Gosub(dial,out,1(LOCAL/${EXTEN}@extensions))
 same =>                n,Goto(i,return)
exten => _${BRANCHES}${EXTENSIONS},1,NoOp(Ausgehender Zweigstellenanruf)
 same =>                           n,Gosub(helpers,assert,1(${PRIVILEGE_REMOTECALL}))
 same =>                           n,Gosub(dial,out,1(IAX2/${EXTEN:0:${BRANCHES_LEN}}/${EXTEN:${BRANCHES_LEN}}:extensions)) ; Zweigstellenübergreifende Anrufe
 same =>                           n,Goto(i,return)
exten => _${BRANCH}${EXTENSIONS},1,Goto(${EXTEN:${BRANCHES_LEN}},1)
exten => _${PREFIX_INTERNATIONAL}ZXXX!,1,Goto(+${FILTER(0123456789,${EXTEN:${LEN(${PREFIX_INTERNATIONAL})}})},1)
exten => _${PREFIX_NATIONAL}${COUNTRY_PATTERN}!,1,Goto(+${COUNTRY_CODE}${FILTER(0123456789,${EXTEN:${LEN(${PREFIX_NATIONAL})}})},1)

; Callbackkontext für die Rückruffunktion in VoiceMail und Directory
;--------------------------------------------------------------------
[from-voicemail]
include => internal-dial
exten => i,1,NoOp(Ungültige Rückrufnummer in Voicemail)
 same =>   n,Playback(pbx-invalid)
 same =>   n(return),Congestion()

; Kontext für alle Peers in der users.conf
;------------------------------------------
[from-internal](+)
exten => _${EMERGENCIES},1,NoOp(Notruf)
 same =>                 n,Gosub(dial,string,1(${EXTEN}))
 same =>                 n,Gosub(dial,out,1(${GOSUB_RETVAL}))
 same =>                 n,Goto(i,return)
exten => ${EXTENSION_PROGRAM},1,NoOp(Interner Verzeichnisaufruf)
 same =>                      n,Directory(default,from-voicemail)
 same =>                      n,Hangup()
exten => ${EXTENSION_VOICEMAIL},1,NoOp(Interner Voicemailabruf)
 same =>                        n,Set(MAILBOX=${QUOTE(${SIPPEER(${CHANNEL(peername)},mailbox)})})
 same =>                        n,Answer(${ANSWER_DELAY})
 same =>                        n,VoiceMailMain(${MAILBOX},${IF(${EXISTS(${MAILBOX})}?s)})
 same =>                        n,Hangup()
exten => *11,1,NoOp(Programm abfragen)
 same =>     n,Gosub(say(Branch/Program))
 same =>     n,Hangup()
 same =>     n(say),Answer(${ANSWER_DELAY})
 same =>     n,GotoIf(${DB_EXISTS(${LOCAL(ARG1)})}?exists)
 same =>     n,Playback(vm-no)
 same =>     n,Return()
 same =>     n(exists),SayNumber(${DB_RESULT})
 same =>     n,Return()
exten => _*12*Z,1,NoOp(Programm setzen)
 same =>        n,Gosub(*13,set(${EXTEN:4}))
 same =>        n,Hangup()
exten => *13,1,NoOp(Programm löschen)
 same =>     n,Gosub(set(0))
 same =>     n,Hangup()
 same =>     n(set),Gosub(helpers,assert,1(${PRIVILEGE_SETPROGRAM}))
 same =>     n,GotoIf(${LOCAL(ARG1)}?:exists)
 same =>     n,GotoIf(${DIALPLAN_EXISTS(program,${LOCAL(ARG1)},1)}?exists)
 same =>     n,Playback(beeperr)
 same =>     n,Return()
 same =>     n(exists),NoOp(LOCK(Program))
 same =>     n,Set(LOCAL(INDEX)=10)
 same =>     n,While(${SET(LOCAL(INDEX)=$[${LOCAL(INDEX)}-1])})
 same =>     n,Set(DEVICE_STATE(Custom:Program${LOCAL(INDEX)})=${IF($[${LOCAL(INDEX)}=${LOCAL(ARG1)}]?INUSE:NOT_INUSE)})
 same =>     n,EndWhile()
 same =>     n,Set(DB(Branch/Program)=${LOCAL(ARG1)})
 same =>     n,GotoIf(${LOCAL(ARG1)}?done)
 same =>     n,NoOp(${DB_DELETE(Branch/Program)})
 same =>     n(done),NoOp(UNLOCK(Program))
 same =>     n,Playback(beep)
 same =>     n,Return()
exten => *22,1,NoOp(Mailbox abfragen)
 same =>     n,Gosub(*11,say(Branch/Mailbox))
 same =>     n,Hangup()
exten => _*23*.,1,NoOp(Mailbox setzen)
 same =>        n,Gosub(helpers,assert,1(${PRIVILEGE_SETMAILBOX}))
 same =>        n,GotoIf(${MAILBOX_EXISTS(${EXTEN:4})}?exists)
 same =>        n,Playback(beeperr)
 same =>        n,Hangup()
 same =>        n(exists),Set(DB(Branch/Mailbox)=${EXTEN:4})
 same =>        n,Playback(beep)
 same =>        n,Hangup()
exten => *24,1,NoOp(Mailbox löschen)
 same =>     n,Gosub(helpers,assert,1(${PRIVILEGE_SETMAILBOX}))
 same =>     n,NoOp(${DB_DELETE(Branch/Mailbox)})
 same =>     n,Playback(beep)
 same =>     n,Hangup()
exten => _***.,1,NoOp(Gerätepickup)
 same =>       n,Pickup(*${FILTER(0123456789,${EXTEN:3})}@extensions)
 same =>       n,Hangup()
exten => _**${EXTENSIONS},1,NoOp(Interner Pickup)
 same =>                  n,Goto(pickup,${EXTEN:2},1)
exten => _**${BRANCHES}${EXTENSIONS},1,NoOp(Zweigstellenübergreifender Pickup)
 same =>                             n,Gosub(helpers,assert,1(${PRIVILEGE_REMOTEPICKUP}))
 same =>                             n,Dial(IAX2/${EXTEN:2:${BRANCHES_LEN}}/${EXTEN:$[2+${BRANCHES_LEN}]}:pickup)
 same =>                             n,Hangup()
exten => *3246,1,NoOp(Echoaufruf)
 same =>       n,Gosub(helpers,assert,1(${PRIVILEGE_ECHO}))
 same =>       n,Echo()
 same =>       n,Hangup()
exten => _*.,1,NoOp(Geräteanruf)
 same =>     n,Gosub(helpers,assert,1(${PRIVILEGE_DEVICECALL}))
 same =>     n,Goto(extensions,,1)
exten => i,1,NoOp(Ungültige interne Wahl)
 same =>   n,Playback(pbx-invalid)
 same =>   n(return),Hangup()
include => internal-dial
exten => _${BRANCHES},1,Goto(${EXTEN}${EXTENSIONS_PADDING}${EXTENSION_PROGRAM},1)
exten => _**${BRANCH}${EXTENSIONS},1,Goto(**${EXTEN:$[2+${BRANCHES_LEN}]},1)
